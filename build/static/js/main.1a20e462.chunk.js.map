{"version":3,"sources":["components/Tags.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["delimiters","Tags","handleDelete","i","_this$props","_this","props","albumTags","setAlbumTags","filter","tag","index","handleAddition","tags","slice","push","handleDrag","currPos","newPos","_this$props2","newTags","splice","this","react_default","a","createElement","className","ReactTags","autofocus","React","Component","PostList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","value","target","albumId","prevState","assign","defineProperty","localStorage","setItem","JSON","stringify","state","PostData","reduce","dictionary","album","id","inputRef","createRef","inputTimer","current","focus","localStoredTags","getItem","parse","_this2","_this$state","filteredAlbums","title","indexOf","react","htmlFor","ref","type","name","placeholder","onChange","map","url","key","concat","src","alt","components_Tags","Boolean","length","App","components_PostList","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1a20e462.chunk.js","sourcesContent":["import React from 'react';\nimport {WithContext as ReactTags} from 'react-tag-input';\n\nimport './Tags.styles.css';\n\nconst KeyCodes = {\n  comma: 188,\n  enter: 13,\n};\n\nconst delimiters = [KeyCodes.comma, KeyCodes.enter];\n\nclass Tags extends React.Component {\n  handleDelete = (i) => {\n    const { albumTags, setAlbumTags } = this.props;\n\n    setAlbumTags(albumTags.filter((tag, index) => index !== i));\n  };\n\n  handleAddition = (tag) => {\n    const tags = this.props.albumTags.slice();\n\n    tags.push(tag);\n    this.props.setAlbumTags(tags);\n  };\n\n  handleDrag = (tag, currPos, newPos) => {\n    const { albumTags, setAlbumTags } = this.props;\n\n    const newTags = albumTags.slice();\n\n    newTags.splice(currPos, 1);\n    newTags.splice(newPos, 0, tag);\n\n    setAlbumTags(newTags);\n  };\n\n  render() {\n    const { albumTags } = this.props;\n\n    return (\n      <div className=\"Tags\">\n        <ReactTags\n          tags={albumTags}\n          autofocus={false}\n          handleDelete={this.handleDelete}\n          handleAddition={this.handleAddition}\n          handleDrag={this.handleDrag}\n          delimiters={delimiters}\n        />\n      </div>\n    )\n  }\n};\n\nexport default Tags;","import React, {Component, Fragment, createRef} from 'react';\nimport PostData from '../data/posts.json';\nimport Tags from './Tags.js';\n\nimport './PostList.styles.css';\n\nclass PostList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n      tags: PostData.reduce(\n        (dictionary, album) => Object.assign(dictionary, { [album.id]: [] }),\n        {}\n      ),\n    };\n\n    this.inputRef = createRef();\n    this.inputTimer = null;\n  }\n\n  componentDidMount() {\n    if (this.inputRef.current) {\n      this.inputRef.current.focus();\n    }\n\n    const localStoredTags = localStorage.getItem('albumTagsDictionary');\n\n    if (localStoredTags) {\n      // JSON.parse could throw an error if stored string value has wrong format\n      try {\n        this.setState({ tags: JSON.parse(localStoredTags) });\n      } catch(e) {}\n    }\n  }\n\n  handleChange = (e) => this.setState({ value: e.target.value });\n\n  setAlbumTags = (albumId, albumTags) => {\n    this.setState((prevState) => {\n      const newTags = Object.assign(prevState.tags, { [albumId]: albumTags });\n\n      localStorage.setItem('albumTagsDictionary', JSON.stringify(newTags));\n\n      return { tags: newTags };\n    });\n  };\n\n  render() {\n    const { value, tags } = this.state;\n\n    const filteredAlbums = PostData.filter(album => album.title.indexOf(value) !== -1);\n\n    return (\n      <Fragment>\n        <div className='page-header'>\n          <h1>Gallery</h1>\n          <label htmlFor=\"name\">Search:&nbsp;</label>\n          <input\n            ref={this.inputRef}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Search\"\n            onChange={this.handleChange}\n          />\n        </div>\n        <div>\n          {filteredAlbums.map((album) => {\n            const {title, id, url} = album;\n\n            return (\n              <div key={`album-${id}`} className=\"wrapper\">\n                <div className=\"wrap\">\n                  <img src={url} alt=\"img\" className=\"img\"/>\n                  <p>{title}</p>\n                  <Tags\n                    albumTags={tags[id]}\n                    setAlbumTags={(tags) => this.setAlbumTags(id, tags)}\n                  />\n                </div>\n              </div>\n            );\n          })}\n          {!Boolean(filteredAlbums.length) && <div>Nothing found</div>}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default PostList;\n","import React, { Component } from 'react';\nimport PostList from './components/PostList';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PostList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}